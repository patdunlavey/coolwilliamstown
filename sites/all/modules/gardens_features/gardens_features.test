<?php
// $Id$

/**
 * Tests for auto-enabling and disabling hidden submodules and dependencies.
 */
class EnableDisableHiddenSubModulesAndDependenciesTestCase extends DrupalWebTestCase {
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => 'Enable/disable hidden submodules and dependencies',
      'description' => 'Test that hidden submodules and dependencies are automatically enabled and disabled when appropriate.',
      'group' => 'Gardens features',
    );
  }

  function setUp() {
    parent::setUp(array('gardens_features', 'gardens_features_test'));
    $this->admin_user = $this->drupalCreateUser(array('access administration pages', 'administer modules'));
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Test enabling and disabling a hidden submodules in various combinations.
   */
  function testEnableDisableHiddenSubModule() {
    // Trigger the submodules we want to be hidden for this test.
    variable_set('gardens_features_test_submodules', TRUE);

    // Make sure that the two modules which the submodule depends on are both
    // disabled at the beginning. The submodule should also start off as
    // disabled.
    $this->setModuleStatus(array(
      'forum' => FALSE,
      'poll' => FALSE,
    ));
    $this->assertFalse(module_exists('gardens_features_test_submodule'), t('The submodule starts off as disabled.'));

    // Enable both modules at the same time. The submodule should automatically
    // be enabled.
    $this->setModuleStatus(array(
      'forum' => TRUE,
      'poll' => TRUE,
    ));
    $this->assertTrue(module_exists('gardens_features_test_submodule'), t('The submodule was automatically enabled.'));

    // Disable one of the them. The submodule should be automatically disabled.
    $this->setModuleStatus(array(
      'forum' => FALSE,
    ));
    $this->assertFalse(module_exists('gardens_features_test_submodule'), t('The submodule was automatically disabled.'));

    // Disable the other while enabling the first. The submodule should remain
    // disabled.
    $this->setModuleStatus(array(
      'forum' => TRUE,
      'poll' => FALSE,
    ));
    $this->assertFalse(module_exists('gardens_features_test_submodule'), t('The submodule remained disabled since its dependencies were not both enabled.'));

    // Enabling the second module should now result in the submodule being
    // enabled again.
    $this->setModuleStatus(array(
      'poll' => TRUE,
    ));
    $this->assertTrue(module_exists('gardens_features_test_submodule'), t('The submodule was automatically enabled.'));
  }

  /**
   * Test disabling Gardens Features at the same time as the submodule.
   */
  function testDisableGardensFeatures() {
    // Trigger the submodules we want to be hidden for this test.
    variable_set('gardens_features_test_submodules', TRUE);

    // First enable both modules and make sure the submodule is automatically
    // enabled.
    $this->setModuleStatus(array(
      'forum' => TRUE,
      'poll' => TRUE,
    ));
    $this->assertTrue(module_exists('gardens_features_test_submodule'), t('The submodule was automatically enabled.'));

    // Disable Gardens Features and one of the submodule's dependencies, and
    // make sure that the submodule is correctly disabled (even though the
    // Gardens Features module which controls this is itself in the process of
    // being disabled).
    $this->setModuleStatus(array(
      'forum' => FALSE,
      'gardens_features' => FALSE,
    ));
    $this->assertFalse(module_exists('gardens_features_test_submodule'), t('The submodule was automatically disabled even while the Gardens Features module was also being disabled.'));
  }

  /**
   * Test that hidden dependencies are auto-enabled properly.
   */
  function testAutoEnableHiddenDependencies() {
    // Trigger the dependencies we want to be hidden for this test.
    $this->setModuleStatus(array(
      'forum' => FALSE,
      'poll' => FALSE,
    ));
    variable_set('gardens_features_test_dependencies', TRUE);

    // Enable the module that has the hidden dependencies, and make sure the
    // dependencies were auto-enabled.
    $this->setModuleStatus(array(
      'gardens_features_test_submodule' => TRUE,
    ));
    $this->assertTrue(module_exists('forum') && module_exists('poll'), t('The hidden dependencies were automatically enabled.'));

    // Disable the module that has the hidden dependencies, and make sure the
    // dependencies were auto-disabled.
    $this->setModuleStatus(array(
      'gardens_features_test_submodule' => FALSE,
    ));
    $this->assertTrue(!module_exists('forum') && !module_exists('poll'), t('The hidden dependencies were automatically disabled.'));
  }

  /**
   * Helper function to enable or disable a set of modules via the UI.
   *
   * @param $module_info
   *   An array whose keys are the names of modules and whose values are either
   *   TRUE (to enable the corresponding module) or FALSE (to disable it).
   */
  function setModuleStatus($module_info) {
    $edit = array();
    foreach ($module_info as $module => $status) {
      // Find out what group this module lives in on the modules page by
      // getting the package information from its .info file. We can't use
      // system_get_info() here since that only works for enabled modules, so
      // we have to query the database directly.
      $info = unserialize(db_query('SELECT info FROM {system} WHERE name = :name', array(':name' => $module))->fetchField());
      $group = $info['package'];
      $edit["modules[{$group}][{$module}][enable]"] = $status;
    }
    $this->drupalPost('admin/modules', $edit, t('Save configuration'));

    // Fix a cache clearing issue in the thread running the tests.
    module_list(TRUE);

    foreach ($module_info as $module => $status) {
      if ($status) {
        $this->assertTrue(module_exists($module), t('The @module module is enabled.', array('@module' => $module)));
      }
      else {
        $this->assertFalse(module_exists($module), t('The @module module is disabled.', array('@module' => $module)));
      }
    }
  }
}
